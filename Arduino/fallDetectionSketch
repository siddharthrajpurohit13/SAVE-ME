//Include libraries
#include "SparkFunLSM6DS3.h"
#include "Wire.h"
#include "SPI.h"
#include <WiFiNINA.h>
#include <ArduinoHttpClient.h>
#include <Arduino_LSM6DS3.h>

LSM6DS3Core myIMU(SPI_MODE, SPIIMU_SS);


//Variables declaration
char ssid[] = ""; // give wifi name
char pass[] = ""; // give wifi password
int status = WL_IDLE_STATUS;
int HTTP_PORT = 80; 
String HTTP_METHOD = "POST";
char HOST_NAME[] = ""; // hostname of web server ex: api.mulesoft.com
String PATH_NAME   = ""; //URI path ex: /api/sensor/username
String client_id = ""; //client id of Mulesoft API
String client_secret = ""; // client secret of MuleSoft API
String postData = ""; //default value
String xaxis = "0"; //default value
String yaxis = "0"; //default value
String zaxis = "0"; //default value
String fallDetection = ""; //default value
String accelerometer = "0,0,0"; //default value
String pedometer = "0"; //default value

WiFiClient client;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  initiateWifi();
  delay(1000); //relax...
  acccelerometerfn();
  
  //Call .beginCore() to configure the IMU
  if( myIMU.beginCore() != 0 )
  {
    Serial.print("Error at beginCore().\n");
  }
  else
  {
    Serial.print("\nbeginCore() passed.\n");
  }

  //Error accumulation variable
  uint8_t errorAccumulator = 0;
  uint8_t dataToWrite = 0;  //Temporary variable

  //Setup the accelerometer******************************
  dataToWrite = 0; //Start Fresh!
  dataToWrite |= LSM6DS3_ACC_GYRO_BW_XL_200Hz;
  dataToWrite |= LSM6DS3_ACC_GYRO_FS_XL_2g;
  dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_416Hz;
  dataToWrite |= LSM6DS3_ACC_GYRO_ODR_XL_26Hz;

  // //Now, write the patched together data
  errorAccumulator += myIMU.writeRegister(LSM6DS3_ACC_GYRO_CTRL1_XL, dataToWrite);

  //Set the ODR bit
  errorAccumulator += myIMU.readRegister(&dataToWrite, LSM6DS3_ACC_GYRO_CTRL4_C);
  dataToWrite &= ~((uint8_t)LSM6DS3_ACC_GYRO_BW_SCAL_ODR_ENABLED);

  
  // Write 00h into WAKE_UP_DUR 
  errorAccumulator += myIMU.writeRegister( LSM6DS3_ACC_GYRO_WAKE_UP_DUR, 0x00 );
  errorAccumulator += myIMU.writeRegister(LSM6DS3_ACC_GYRO_FREE_FALL, 0x33);
  errorAccumulator += myIMU.writeRegister( LSM6DS3_ACC_GYRO_MD1_CFG, 0x10 );
  errorAccumulator += myIMU.writeRegister( LSM6DS3_ACC_GYRO_MD2_CFG, 0x10 );
  errorAccumulator += myIMU.writeRegister(LSM6DS3_ACC_GYRO_TAP_CFG1, 0x01);


  pedo();
    if( errorAccumulator )
    {
      Serial.println("Problem configuring the device.");
    }
    else
    {
      Serial.println("Device O.K.");
    }
}

void loop() {
   uint8_t readDataByte = 0;
  //Read the wake-up source register
   myIMU.readRegister(&readDataByte, LSM6DS3_ACC_GYRO_WAKE_UP_SRC);
  //Mask off the FF_IA bit for free-fall detection
  readDataByte &= 0x20;
  //Check for free-fall
    if( readDataByte )
  {
    //debounce
     delay(100);
    
  fallDetection = "true";
  Serial.println("Interrupt caught.  Free fall detected.");
  }
  else {
    fallDetection = "false";
    }
   accelerometerDetection();
   pedometerDetected();
   postData = ("{\"fallDetection\": " + fallDetection + ",\"pedometer\": " + pedometer + ",\"accelerometer\":" +  accelerometer + "}");
   httpPostData();
}

void initiateWifi() {
  while (!Serial) {}
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("Communication with WiFi module failed!");
    while (true);
  }
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to WPA SSID: ");
    Serial.println(ssid);
    status = WiFi.begin(ssid, pass);
  }
  Serial.println("You're connected to the network");
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);
 
}

void httpPostData() {
  if(client.connect(HOST_NAME, HTTP_PORT)) {
    //Serial.println("Connected to server");
    client.println(HTTP_METHOD + " " + PATH_NAME + " HTTP/1.1");
    client.println("Host: " + String(HOST_NAME));
    client.println("client_id:" + client_id);
    client.println("client_secret:" + client_secret);
    //client.println("Content-Type: text/plain");
    client.println("Content-Type: application/json");
    client.println("Content-Length: " + String(postData.length()));
    client.println();
    client.println(postData);
  }
}

void pedo() {
  uint8_t errorAccumulator = 0;
  // Enable embedded functions -- ALSO clears the pdeo step count
 errorAccumulator += myIMU.writeRegister(LSM6DS3_ACC_GYRO_CTRL10_C, 0x3E);
  // Enable pedometer algorithm
 errorAccumulator += myIMU.writeRegister(LSM6DS3_ACC_GYRO_TAP_CFG1, 0x40);
  // Step Detector interrupt driven to INT1 pin
 errorAccumulator += myIMU.writeRegister( LSM6DS3_ACC_GYRO_INT1_CTRL, 0x10 );
}

void pedometerDetected() {
  uint8_t readDataByte = 0;
  uint16_t stepsTaken = 0;
  //Read the 16bit value by two 8bit operations
  myIMU.readRegister(&readDataByte, LSM6DS3_ACC_GYRO_STEP_COUNTER_H);
  stepsTaken = ((uint16_t)readDataByte) << 8;
  myIMU.readRegister(&readDataByte, LSM6DS3_ACC_GYRO_STEP_COUNTER_L);
  stepsTaken |= readDataByte;
  pedometer = (stepsTaken);
  //Display steps taken
  Serial.print("Steps taken: ");
  Serial.println(stepsTaken);

  //Wait 1 second
  //delay(500);
}

void accelerometerDetection() {
  float x, y, z;
  if (IMU.accelerationAvailable()) {
    IMU.readAcceleration(x, y, z);
    xaxis = (x);
    yaxis = (y);
    zaxis = (z);
    accelerometer = (xaxis + "," + yaxis + "," + zaxis);
    Serial.print(accelerometer);
    Serial.print('\n');
 }
}

void acccelerometerfn() {
  while (!Serial);
  if (!IMU.begin()) {
    Serial.println("Failed to initialize IMU!");

    while (1);
  }
  Serial.print("Accelerometer sample rate = ");
  Serial.print(IMU.accelerationSampleRate());
  Serial.println(" Hz");
  Serial.println();
  Serial.println("Acceleration in G's");
  Serial.println("X\tY\tZ");
}
